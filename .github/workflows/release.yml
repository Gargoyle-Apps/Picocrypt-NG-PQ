name: release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

jobs:
  build:
    name: build (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache-dependency-path: src/go.sum

      - name: Install deps (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install glfw glew

      - name: Install deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc xorg-dev libgtk-3-dev libgl1-mesa-dev libglu1-mesa

      - name: Install deps (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y mingw
          echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: Tidy modules
        shell: bash
        run: |
          cd src
          go mod tidy

      - name: Probe circl API
        shell: bash
        run: |
          cd src
          go list -m -json github.com/cloudflare/circl | sed -n '1,120p'
          echo "-- circl kem packages --"
          go list github.com/cloudflare/circl/kem/... || true

      - name: Build
        env:
          CGO_ENABLED: 1
          CC: gcc
        shell: bash
        run: |
          cd src
          if [ "${{ runner.os }}" = "Windows" ]; then
            go build -ldflags="-s -w -H=windowsgui" -o Picocrypt-NG.exe
            echo "OUT=Picocrypt-NG.exe" >> $GITHUB_ENV
          elif [ "${{ runner.os }}" = "macOS" ]; then
            go build -ldflags="-s -w" -o Picocrypt-NG
            tar -czf Picocrypt-NG-macos.tar.gz Picocrypt-NG
            echo "OUT=Picocrypt-NG-macos.tar.gz" >> $GITHUB_ENV
          else
            go build -ldflags="-s -w" -o Picocrypt-NG
            tar -czf Picocrypt-NG-linux.tar.gz Picocrypt-NG
            echo "OUT=Picocrypt-NG-linux.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUT }}
          path: src/${{ env.OUT }}
          retention-days: 1

      - name: Prepare .app and DMG (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          unzip -q dist/macos/Picocrypt-NG.app.zip -d dist/macos
          cp src/Picocrypt-NG dist/macos/Picocrypt-NG.app/Contents/MacOS/Picocrypt-NG
          chmod +x dist/macos/Picocrypt-NG.app/Contents/MacOS/Picocrypt-NG
          rm -rf dist/dmg
          mkdir -p dist/dmg
          cp -R dist/macos/Picocrypt-NG.app dist/dmg/
          ln -s /Applications dist/dmg/Applications
          hdiutil create -volname "Picocrypt NG" -srcfolder dist/dmg -fs HFS+ -format UDZO dist/Picocrypt-NG.dmg

      - name: Upload DMG (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: Picocrypt-NG.dmg
          path: dist/Picocrypt-NG.dmg

  release:
    name: create release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/Picocrypt-NG.exe
            dist/**/Picocrypt-NG-linux.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


